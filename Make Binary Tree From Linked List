void levelordertraversal(TreeNode*root){
    queue<TreeNode*>q;
    q.push(root);
    q.push(NULL);
     while(!q.empty()){
        TreeNode*front=q.front();
        q.pop();
        if(front==NULL){
            if(!q.empty()){
             q.push(NULL);
            }
            
        }
        else{
      // cout<<front->data<<" ";
        if(front->left!=nullptr)
       q.push(front->left);
       if(front->right!=nullptr)
       q.push(front->right);

        }
       

     }
  }

  TreeNode* buildtree(TreeNode *root, vector<int>&v,int i,int n){
      if(i>=n)
       return NULL;
       
       root=new TreeNode(v[i]);
     root->left=buildtree(root,v,2*i+1,n);
     root->right=buildtree(root,v,2*i+2,n);
     return root;
  }


void convert(Node *head, TreeNode *&root) {
    // Your code here
    vector<int>v;
    Node*temp=head;
    while(temp!=NULL){
        v.push_back(temp->data);
        temp=temp->next;
    }
    
    int s=0;
    int n=v.size();
   root=buildtree(root,v,s,n);
   levelordertraversal(root);
    
}
